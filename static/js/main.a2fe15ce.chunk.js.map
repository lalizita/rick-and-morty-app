{"version":3,"sources":["images/rickAndMorty.png","store/ducks/characters.js","store/ducks/locations.js","store/ducks/episodes.js","store/store.js","pages/Home.jsx","containers/CharactersList.jsx","containers/CharactersSearch.jsx","pages/Characters.jsx","containers/LocationsList.jsx","containers/LocationsSearch.jsx","pages/Locations.jsx","containers/EpisodesList.jsx","containers/EpisodesSearch.jsx","pages/Episodes.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Types","CHARACTERS_REQUESTED","CHARACTERS_RECEIVED","CHARACTERS_FAILED","initialState","characters","loading","filteredCharacters","getCharacters","dispatch","a","type","axios","get","data","results","error","LOCATIONS_REQUESTED","LOCATIONS_RECEIVED","LOCATIONS_FAILED","locations","filteredLocations","getLocations","EPISODES_REQUESTED","EPISODES_RECEIVED","EPISODES_FAILED","episodes","filteredEpisodes","getEpisodes","combineReducers","state","action","HomeContainer","styled","Container","ImageElement","img","Title","div","Menu","MenuItem","Link","disabled","Home","Row","Col","sm","md","size","offset","src","rickAndMortyImage","alt","to","Label","span","CharacterImage","SpinnerContainer","ListHeader","ButtonsContainer","SortIcon","PaginationContainer","compareCresc","b","name","compareDecresc","CharactersList","useDispatch","useSelector","useState","currentPage","setCurrentPage","currentItems","setCurrentItems","pagesNumber","setPagesNumber","indexOfLast","indexOfFirst","useEffect","filterItensPerPage","slice","pages","length","index","Math","ceil","push","sortCresc","list","order","orderedList","sort","Button","outline","color","style","marginRight","onClick","ListGroup","Spinner","map","character","ListGroupItem","key","id","Media","left","top","object","image","body","heading","ListGroupItemText","species","gender","status","Pagination","number","PaginationItem","active","PaginationLink","handleClick","ButtonContainer","CharactersSearch","formik","useFormik","initialValues","search","filter","onSubmit","values","filterLiterals","toLowerCase","filterCharacters","validationSchema","Yup","shape","required","setFieldValue","handleSubmit","errors","Card","form","FormGroup","for","Input","onChange","value","target","placeholder","FormFeedback","Characters","SeeCharacters","CharactersModal","isOpen","onClose","Modal","toggle","scrollable","ModalHeader","ModalBody","Table","Array","isArray","ModalFooter","LocationsList","charactersModal","setCharactersModal","openModal","residents","charactersToSend","reduce","acc","cur","match","location","dimension","LocationsSearch","searchFilter","filterLocations","Locations","EpisodesList","episode","air_date","EpisodesSearch","filterEpisodes","Episodes","store","createStore","configureStore","applyMiddleware","thunk","App","props","exact","path","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2fe15ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rickAndMorty.f8f3c3e1.png\";","import axios from 'axios';\n\n//Action Types\n\nexport const Types = {\n  CHARACTERS_REQUESTED: 'CHARACTERS_REQUESTED',\n  CHARACTERS_RECEIVED: 'CHARACTERS_RECEIVED',\n  CHARACTERS_FAILED: 'CHARACTERS_FAILED',\n};\n\n//Reducer\n\nconst initialState = {\n  characters: [],\n  loading: false,\n  filteredCharacters: [],\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  const { characters, error, filteredCharacters } = action;\n  switch (action.type) {\n    case Types.CHARACTERS_REQUESTED:\n      return {\n        ...state,\n        loading: true,\n      };\n    case Types.CHARACTERS_RECEIVED:\n      return {\n        ...state,\n        loading: false,\n        characters,\n      };\n    case Types.CHARACTERS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        characters: [],\n        error,\n      };\n    default:\n      return state;\n  }\n}\n\n//Action Creators\n\nexport const getCharacters = () => {\n  return async (dispatch) => {\n    dispatch({ type: Types.CHARACTERS_REQUESTED });\n    try {\n      const { data } = await axios.get('https://rickandmortyapi.com/api/character');\n      dispatch({\n        type: Types.CHARACTERS_RECEIVED,\n        characters: data.results,\n      });\n    } catch (error) {\n      dispatch({\n        type: Types.CHARACTERS_FAILED,\n        error,\n      });\n    }\n  };\n};\n\nexport const filterCharacters = ({ search, filter }) => {\n  const filterLiterals = {\n    name: `?name=${search.toLowerCase()}`,\n    species: `?species=${search.toLowerCase()}`,\n    gender: `?gender=${search.toLowerCase()}`,\n  };\n\n  return async (dispatch) => {\n    dispatch({ type: Types.CHARACTERS_REQUESTED });\n    try {\n      const { data } = await axios.get(`https://rickandmortyapi.com/api/character${filterLiterals[filter]}`);\n      dispatch({\n        type: Types.CHARACTERS_RECEIVED,\n        characters: data.results,\n      });\n    } catch (error) {\n      dispatch({\n        type: Types.CHARACTERS_FAILED,\n        error,\n      });\n    }\n  };\n}\n\nexport const getMultipleCharacters = (characters) => {\n  return async (dispatch) => {\n    dispatch({ type: Types.CHARACTERS_REQUESTED });\n    try {\n      const { data } = await axios.get(`https://rickandmortyapi.com/api/character/${characters}`);\n      dispatch({\n        type: Types.CHARACTERS_RECEIVED,\n        characters: data,\n      });\n    } catch (error) {\n      dispatch({\n        type: Types.CHARACTERS_FAILED,\n        error,\n      });\n    }\n  };\n};","import axios from 'axios';\n\n//Action Types\n\nexport const Types = {\n  LOCATIONS_REQUESTED: 'LOCATIONS_REQUESTED',\n  LOCATIONS_RECEIVED: 'LOCATIONS_RECEIVED',\n  LOCATIONS_FAILED: 'LOCATIONS_FAILED',\n};\n\n// Reducer\n\nconst initialState = {\n  locations: [],\n  loading: false,\n  filteredLocations: [],\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  const { locations, error, filteredLocations } = action;\n  switch (action.type) {\n    case Types.LOCATIONS_REQUESTED:\n      return {\n        ...state,\n        loading: true,\n      };\n    case Types.LOCATIONS_RECEIVED:\n      return {\n        ...state,\n        loading: false,\n        locations,\n      };\n    case Types.LOCATIONS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        error,\n        locations: [],\n      };\n    default:\n      return state;\n  }\n};\n\n//Action cretors\n\nexport const getLocations = () => {\n  return async (dispatch) => {\n    dispatch({ type: Types.LOCATIONS_REQUESTED });\n    try {\n      const { data } = await axios.get('https://rickandmortyapi.com/api/location');\n      dispatch({\n        type: Types.LOCATIONS_RECEIVED,\n        locations: data.results,\n      });\n    } catch (error) {\n      dispatch({\n        type: Types.LOCATIONS_FAILED,\n        error,\n      });\n    }\n  };\n};\n\nexport const filterLocations = ({ filter, search }) => {\n  const searchFilter = {\n    name: `?name=${search.toLowerCase()}`,\n    dimension: `?dimension=${search.toLowerCase()}`,\n  };\n\n  return async (dispatch) => {\n    dispatch({ type: Types.LOCATIONS_REQUESTED });\n    try {\n      const { data } = await axios.get(`https://rickandmortyapi.com/api/location${searchFilter[filter]}`);\n      dispatch({\n        type: Types.LOCATIONS_RECEIVED,\n        locations: data.results,\n      });\n    } catch (error) {\n      dispatch({\n        type: Types.LOCATIONS_FAILED,\n        error,\n      });\n    }\n  };\n};","import axios from 'axios';\n\n//Action Types\n\nexport const Types = {\n  EPISODES_REQUESTED: 'EPISODES_REQUESTED',\n  EPISODES_RECEIVED: 'EPISODES_RECEIVED',\n  EPISODES_FAILED: 'EPISODES_FAILED',\n};\n\n// Reducer\n\nconst initialState = {\n  episodes: [],\n  loading: false,\n  filteredEpisodes: [],\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  const { episodes, error, filteredEpisodes } = action;\n  switch (action.type) {\n    case Types.EPISODES_REQUESTED:\n      return {\n        ...state,\n        loading: true,\n      };\n    case Types.EPISODES_RECEIVED:\n      return {\n        ...state,\n        loading: false,\n        episodes,\n      };\n    case Types.EPISODES_FAILED:\n      return {\n        ...state,\n        loading: false,\n        error,\n        episodes: [],\n      };\n    default:\n      return state;\n  }\n};\n\n//Action cretors\n\nexport const getEpisodes = () => {\n  return async (dispatch) => {\n    dispatch({ type: Types.EPISODES_REQUESTED });\n    try {\n      const { data } = await axios.get('https://rickandmortyapi.com/api/episode');\n      dispatch({\n        type: Types.EPISODES_RECEIVED,\n        episodes: data.results,\n      });\n    } catch (error) {\n      dispatch({\n        type: Types.EPISODES_FAILED,\n        error,\n      });\n    }\n  };\n};\n\nexport const filterEpisodes = ({ search }) => {\n  return async (dispatch) => {\n    dispatch({ type: Types.EPISODES_REQUESTED });\n    try {\n      const { data } = await axios.get(`https://rickandmortyapi.com/api/episode?name=${search.toLowerCase()}`);\n      dispatch({\n        type: Types.EPISODES_RECEIVED,\n        episodes: data.results,\n      });\n    } catch (error) {\n      dispatch({\n        type: Types.EPISODES_FAILED,\n        error,\n      });\n    }\n  };\n};","import { combineReducers } from 'redux';\nimport characters from './ducks/characters';\nimport locations from './ducks/locations';\nimport episodes from './ducks/episodes';\n\nexport default combineReducers({\n  characters,\n  locations,\n  episodes,\n});","import React from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport styled from 'styled-components';\nimport rickAndMortyImage from '../images/rickAndMorty.png';\nimport { Link } from \"react-router-dom\";\n\nconst HomeContainer = styled(Container)`\n  text-align:center;\n  margin-top:40px;\n`;\n\nconst ImageElement = styled.img`\n  width:60%;\n  margin:0 auto;\n  @media(max-width:768px){\n    width:100%;\n  }\n`;\n\nconst Title = styled.div`\n  font-size:24px;\n  margin:10px 0px;\n  font-family: Verdana, Geneva, sans-serif;\n  text-align:center;\n`;\n\nconst Menu = styled.div`\n  background:#fafafa;\n  text-align:center;\n  padding:20px;\n  width:100%;\n  margin:0 auto;\n`;\n\nconst MenuItem = styled(Link)`\n  font-family: Verdana, Geneva, sans-serif;\n  text-decoration:none;\n  color: #1d1d1d;\n  font-size:18px;\n  margin:0 10px;\n  cursor:pointer;\n  &:hover{\n    transition:color 0.2s ease-out;\n    color:#82D00A;\n    text-decoration:none;\n  }\n  @media(max-width:768px){\n    display:block;\n    width:100%;\n    margin:20px 0px;\n  }\n  ${({ disabled }) => disabled && `\n    color:#ccc;\n  `}\n`;\n\nconst Home = () => {\n  return (\n    <HomeContainer>\n      <Row>\n        <Col sm=\"12\" md={{ size: 8, offset: 2 }}>\n          <ImageElement src={rickAndMortyImage} alt=\"imagem do Rick And Morty\" />\n          <Title>Welcome to Rick and Morty App!</Title>\n          <Menu>\n            <MenuItem to=\"/characters\">Characters</MenuItem>\n            <MenuItem to=\"/locations\">\n                Locations\n            </MenuItem>\n            <MenuItem to=\"/episodes\">\n                Episodes\n            </MenuItem>\n          </Menu>\n        </Col>\n      </Row>\n    </HomeContainer>\n  );\n};\n\nexport default Home;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport {\n  ListGroup, ListGroupItem, ListGroupItemText,\n  Media, Spinner, Button,\n  Row, Col, Pagination, PaginationItem,\n  PaginationLink,\n} from 'reactstrap';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getCharacters } from '../store/ducks/characters';\n\nconst Label = styled.span`\n  font-weight:600;\n`;\n\nconst CharacterImage = styled.img`\n  width:90px;\n  margin-right:10px;\n`;\n\nconst SpinnerContainer = styled.div`\n  text-align:center;\n  width:100%;\n`;\n\nconst ListHeader = styled.div`\n  padding:40px 20px 10px 20px;\n  font-size:24px;\n`;\n\nconst ButtonsContainer = styled.div`\n  text-align:right;\n`;\n\nconst SortIcon = styled.img`\n  height:20px;\n`;\n\nconst PaginationContainer = styled.div`\n  margin-top:20px;\n  width:100%;\n  text-align:center;\n`;\n\nconst compareCresc = (a, b) => {\n  if (a.name < b.name) return -1;\n  if (a.name > b.name) return 1;\n  return 0;\n};\n\nconst compareDecresc = (a, b) => {\n  if (a.name > b.name) return -1;\n  if (a.name < b.name) return 1;\n  return 0;\n};\n\nconst CharactersList = () => {\n  const dispatch = useDispatch();\n  const { characters, loading } = useSelector((state) => state.characters);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [currentItems, setCurrentItems] = useState([]);\n  const [pagesNumber, setPagesNumber] = useState([]);\n  const itemsPerPage = 5;\n  const indexOfLast = currentPage * itemsPerPage;\n  const indexOfFirst = indexOfLast - itemsPerPage;\n\n  useEffect(() => {\n    dispatch(getCharacters());\n  }, []);\n\n  useEffect(() => {\n    const filterItensPerPage = characters.slice(indexOfFirst, indexOfLast);\n    const pages = [];\n    if (characters.length > 0) setCurrentItems(filterItensPerPage);\n    for (let index = 1; index <= Math.ceil(characters.length / itemsPerPage); index++) {\n      pages.push(index);\n    }\n    setPagesNumber(pages);\n    if (currentPage > pages.length) setCurrentPage(1);\n    if (characters.length === 0) setCurrentItems([]);\n  }, [characters, currentPage]);\n\n  const sortCresc = (list, order) => {\n    const orderedList = order === 'cresc' ? list.sort(compareCresc) : list.sort(compareDecresc);\n    setCurrentItems([...orderedList]);\n  };\n\n  const handleClick = (number) => {\n    setCurrentPage(number);\n    setCurrentItems(characters.slice(indexOfFirst, indexOfLast));\n  };\n\n  return (\n    <>\n      <ListHeader>\n        <Row>\n          <Col sm={6}>\n          Resultados (\n            {characters.length}\n          )\n          </Col>\n          <Col sm={6}>\n            <ButtonsContainer>\n              <Button outline color=\"success\" style={{ marginRight: 10 }} onClick={() => sortCresc(currentItems, 'cresc')}>\n                <SortIcon src=\"https://image.flaticon.com/icons/svg/109/109583.svg\" />\n              </Button>\n              <Button outline color=\"success\" onClick={() => sortCresc(currentItems, 'desc')}>\n                <SortIcon src=\"https://image.flaticon.com/icons/svg/109/109611.svg\" />\n              </Button>\n            </ButtonsContainer>\n          </Col>\n        </Row>\n      </ListHeader>\n      <ListGroup>\n        {loading && (\n          <SpinnerContainer>\n            <Spinner type=\"grow\" color=\"success\" />\n          </SpinnerContainer>\n        )}\n        {currentItems.length > 0 && currentItems.map((character) => (\n          <ListGroupItem key={character.id}>\n            <Media>\n              <Media left top>\n                <CharacterImage object src={character.image} alt={`${character.name}'s photo`} />\n              </Media>\n              <Media body>\n                <Media heading>\n                  { character.name }\n                </Media>\n                <ListGroupItemText>\n                  <div>\n                    <Label>Specie:</Label>\n                    { character.species }\n                  </div>\n                  <div>\n                    <Label>Gender:</Label>\n                    { character.gender }\n                  </div>\n                  <div>\n                    <Label>Status:</Label>\n                    { character.status }\n                  </div>\n                </ListGroupItemText>\n              </Media>\n            </Media>\n          </ListGroupItem>\n        ))}\n      </ListGroup>\n      {characters.length === 0 && (\n        <ListGroup>\n          <ListGroupItem>\n            <h1>Ops, no results...</h1>\n          </ListGroupItem>\n        </ListGroup>\n      )}\n      <PaginationContainer>\n        <Pagination>\n          {pagesNumber.map((number) => (\n            <PaginationItem key={number} active={currentPage === number}>\n              <PaginationLink onClick={() => handleClick(number)}>\n                {number}\n              </PaginationLink>\n            </PaginationItem>\n          ))}\n        </Pagination>\n      </PaginationContainer>\n    </>\n  );\n};\n\nexport default CharactersList;\n","import React, { Fragment } from 'react';\nimport {\n  Col, Row, Card,\n  FormGroup, Label, Input,\n  Button, FormFeedback,\n} from 'reactstrap';\nimport styled from 'styled-components';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { filterCharacters, getCharacters } from '../store/ducks/characters';\n\nconst ButtonContainer = styled.div`\n  margin-top:30px;\n  margin-left:5px;\n  display:inline-block;\n`;\n\nconst CharactersSearch = () => {\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      search: '',\n      filter: 'name',\n    },\n    onSubmit: (values) => {\n      dispatch(filterCharacters(values));\n    },\n    validationSchema: Yup.object().shape({\n      search: Yup.string().required(\"Required field\"),\n      filter: Yup.string().required(\"Required field\")\n    }),\n  });\n\n  const { values, setFieldValue, handleSubmit, errors } = formik;\n\n  return (\n    <>\n      <Row>\n        <Col>\n          <Link to=\"/\">Home</Link>\n        </Col>\n      </Row>\n      <Card body>\n        <Row form>\n          <Col sm={12} md={8}>\n            <FormGroup>\n              <Label for=\"search\">Search Character</Label>\n              <Input\n                type=\"text\"\n                onChange={({ target: { value } }) => {\n                  setFieldValue('search', value);\n                }}\n                name=\"search\"\n                id=\"search\"\n                placeholder=\"Search a character\" \n                value={values.search}\n              />\n              {errors && errors.search && (\n              <FormFeedback> {errors.search} </FormFeedback>\n              )}\n            </FormGroup>\n          </Col>\n          <Col>\n            <Label for=\"filter\">Filter</Label>\n            <Input\n              type=\"select\"\n              name=\"filter\"\n              id=\"filter\"\n              onChange={({ target: { value } }) => {\n                setFieldValue('filter', value)\n              }}\n              value={values.filter}\n            >\n              <option>name</option>\n              <option>species</option>\n              <option>gender</option>\n            </Input>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ButtonContainer>\n              <Button color=\"primary\" onClick={handleSubmit}>Search</Button>\n            </ButtonContainer>\n            <ButtonContainer>\n              <Button outline color=\"primary\" onClick={() => dispatch(getCharacters())}>Clear</Button>\n            </ButtonContainer>\n          </Col>\n        </Row>\n      </Card>\n    </>\n  );\n};\n\nexport default CharactersSearch;\n","import React, { useEffect } from \"react\";\nimport {\n  Container, Row, Col,\n} from 'reactstrap';\nimport { useDispatch } from 'react-redux';\nimport { getCharacters } from '../store/ducks/characters';\nimport CharactersList from '../containers/CharactersList';\nimport CharactersSearch from '../containers/CharactersSearch';\n\n\nconst Characters = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getCharacters());\n  }, []);\n\n  return (\n    <Container>\n      <Row>\n        <Col sm=\"12\" md={{ size: 8, offset: 2 }}>\n          <CharactersSearch />\n          <CharactersList />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Characters;","import React, { Fragment, useEffect, useState } from 'react';\nimport {\n  ListGroup, ListGroupItem, ListGroupItemText,\n  Media, Spinner, Button,\n  Row, Col, Pagination, PaginationItem,\n  PaginationLink, Modal, ModalHeader,\n  ModalBody, ModalFooter, Table,\n} from 'reactstrap';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getLocations } from '../store/ducks/locations';\nimport { getMultipleCharacters } from '../store/ducks/characters';\n\nconst Label = styled.span`\n  font-weight:600;\n`;\n\nconst SpinnerContainer = styled.div`\n  text-align:center;\n  width:100%;\n`;\n\nconst ListHeader = styled.div`\n  padding:40px 20px 10px 20px;\n  font-size:24px;\n`;\n\nconst ButtonsContainer = styled.div`\n  text-align:right;\n`;\n\nconst SortIcon = styled.img`\n  height:20px;\n`;\n\nconst PaginationContainer = styled.div`\n  margin-top:20px;\n  width:100%;\n  text-align:center;\n`;\n\nconst SeeCharacters = styled.span`\n  font-weight:700;\n  color:#82D00A;\n  cursor:pointer;\n`;\n\nconst CharactersModal = ({ isOpen, onClose }) => {\n  const { characters, loading } = useSelector((state) => state.characters);\n  return (\n    <Modal isOpen={isOpen} toggle={onClose} scrollable onClose={onClose}>\n      <ModalHeader toggle={onClose}>Who lives in this location</ModalHeader>\n      {loading && (\n        <SpinnerContainer>\n          <Spinner type=\"grow\" color=\"success\" />\n        </SpinnerContainer>\n      )}\n      <ModalBody>\n        {characters && (\n          <Table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Specie</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Array.isArray(characters) ? characters.map((character) => (\n                <tr key={character.id}>\n                  <td>{character.name}</td>\n                  <td>{character.species}</td>\n                </tr>\n              )) : (\n                <tr key={characters.id}>\n                  <td>{characters.name}</td>\n                  <td>{characters.species}</td>\n                </tr>\n              )}\n            </tbody>\n          </Table>\n        )}\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={onClose}>Quit</Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nconst compareCresc = (a, b) => {\n  if (a.name < b.name) return -1;\n  if (a.name > b.name) return 1;\n  return 0;\n};\n\nconst compareDecresc = (a, b) => {\n  if (a.name > b.name) return -1;\n  if (a.name < b.name) return 1;\n  return 0;\n};\n\nconst LocationsList = () => {\n  const dispatch = useDispatch();\n  const { locations, loading } = useSelector((state) => state.locations);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [currentItems, setCurrentItems] = useState([]);\n  const [pagesNumber, setPagesNumber] = useState([]);\n  const [charactersModal, setCharactersModal] = useState(false);\n  const itemsPerPage = 5;\n  const indexOfLast = currentPage * itemsPerPage;\n  const indexOfFirst = indexOfLast - itemsPerPage;\n\n  useEffect(() => {\n    dispatch(getLocations());\n  }, []);\n\n  useEffect(() => {\n    const filterItensPerPage = locations.slice(indexOfFirst, indexOfLast);\n    const pages = [];\n    if (locations.length > 0) setCurrentItems(filterItensPerPage);\n    for (let index = 1; index <= Math.ceil(locations.length / itemsPerPage); index++) {\n      pages.push(index);\n    }\n    setPagesNumber(pages);\n    if (currentPage > pages.length) setCurrentPage(1);\n    if (locations.length === 0) setCurrentItems([]);\n  }, [locations, currentPage]);\n\n  const sortCresc = (list, order) => {\n    const orderedList = order === 'cresc' ? list.sort(compareCresc) : list.sort(compareDecresc);\n    setCurrentItems([...orderedList]);\n  };\n\n  const handleClick = number => {\n    setCurrentPage(number);\n    setCurrentItems(locations.slice(indexOfFirst, indexOfLast));\n  };\n\n  const openModal = (residents) => {\n    const charactersToSend = residents.reduce((acc, cur) => {\n      const regex = /([0-9]+)/g;\n      const number = cur.match(regex);\n      acc.push(number[0]);\n      return acc;\n    }, []);\n    dispatch(getMultipleCharacters(charactersToSend));\n    setCharactersModal(true);\n  };\n\n  return (\n    <>\n      <ListHeader>\n        <Row>\n          <Col sm={6}>\n            Results (\n            {locations.length}\n            )\n          </Col>\n          <Col sm={6}>\n            <ButtonsContainer>\n              <Button outline color=\"success\" style={{ marginRight: 10 }} onClick={() => sortCresc(currentItems, 'cresc')}>\n                <SortIcon src=\"https://image.flaticon.com/icons/svg/109/109583.svg\" />\n              </Button>\n              <Button outline color=\"success\" onClick={() => sortCresc(currentItems, 'desc')}>\n                <SortIcon src=\"https://image.flaticon.com/icons/svg/109/109611.svg\" />\n              </Button>\n            </ButtonsContainer>\n          </Col>\n        </Row>\n      </ListHeader>\n      <ListGroup>\n        {loading && (\n          <SpinnerContainer>\n            <Spinner type=\"grow\" color=\"success\" />\n          </SpinnerContainer>\n        )}\n        {currentItems.length > 0 && currentItems.map((location) => (\n          <ListGroupItem key={location.id}>\n            <Media body>\n              <Media heading>\n                { location.name }\n              </Media>\n              <ListGroupItemText>\n                <div>\n                  <Label>Dimension:</Label>\n                  { location.dimension }\n                </div>\n                <div>\n                  <Label>Type:</Label>\n                  { location.type }\n                </div>\n                <div>\n                  <Label>Who lives here?:</Label>\n                  <SeeCharacters onClick={() => openModal(location.residents)}> See now</SeeCharacters>\n                  <CharactersModal isOpen={charactersModal} onClose={() => setCharactersModal(false)} />\n                </div>\n              </ListGroupItemText>\n            </Media>\n          </ListGroupItem>\n        ))}\n      </ListGroup>\n      {locations.length === 0 && (\n        <ListGroup>\n          <ListGroupItem>\n            <h1>Ops, no results...</h1>\n          </ListGroupItem>\n        </ListGroup>\n      )}\n      <PaginationContainer>\n        <Pagination>\n          {pagesNumber.map((number) => {\n            return (\n              <PaginationItem key={number} active={currentPage === number}>\n                <PaginationLink onClick={() => handleClick(number)}>\n                  {number}\n                </PaginationLink>\n              </PaginationItem>\n            )\n          })}\n        </Pagination>\n      </PaginationContainer>\n    </>\n  );\n};\n\nexport default LocationsList;\n","import React, { Fragment } from \"react\";\nimport {\n  Col, Row, Card,\n  FormGroup, Label, Input,\n  Button, FormFeedback,\n} from 'reactstrap';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { filterLocations, getLocations } from '../store/ducks/locations';\n\nconst ButtonContainer = styled.div`\n  margin-top:30px;\n  margin-left:5px;\n  display:inline-block;\n`;\n\nconst LocationsSearch = () => {\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      search: '',\n      filter: 'name',\n    },\n    onSubmit: (values) => {\n      dispatch(filterLocations(values));\n    },\n    validationSchema: Yup.object().shape({\n      search: Yup.string().required(\"Required field\"),\n      filter: Yup.string().required(\"Required field\")\n    }),\n  });\n  const { values, setFieldValue, handleSubmit, errors } = formik;\n\n  return (\n    <>\n      <Row>\n        <Col>\n          <Link to=\"/\">Home</Link>\n        </Col>\n      </Row>\n      <Card body>\n        <Row form>\n          <Col sm={12} md={8}>\n            <FormGroup>\n              <Label for=\"search\">Search Location</Label>\n              <Input\n                type=\"text\"\n                onChange={({ target: { value } }) => {\n                  setFieldValue('search', value);\n                }}\n                name=\"search\"\n                id=\"search\"\n                placeholder=\"Search a location\"\n                value={values.search}\n              />\n              {errors && errors.search && (\n                <FormFeedback> {errors.search} </FormFeedback>\n              )}\n            </FormGroup>\n          </Col>\n          <Col>\n            <Label for=\"filter\">Filter By</Label>\n            <Input\n              type=\"select\"\n              name=\"filter\"\n              id=\"filter\"\n              onChange={({ target: { value } }) => {\n                setFieldValue('filter', value);\n              }}\n              value={values.filter}\n            >\n              <option>name</option>\n              <option>dimension</option>\n            </Input>\n          </Col>\n        </Row>\n        <Row>\n          <ButtonContainer>\n            <Button color=\"primary\" onClick={handleSubmit}>Search</Button>\n          </ButtonContainer>\n          <ButtonContainer>\n            <Button outline color=\"primary\" onClick={() => dispatch(getLocations())}>Clear</Button>\n          </ButtonContainer>\n        </Row>\n      </Card>\n    </>\n  );\n};\n\nexport default LocationsSearch;\n","import React, { useEffect } from 'react';\nimport {\n  Container, Row, Col,\n} from 'reactstrap';\nimport { useDispatch } from 'react-redux';\nimport { getLocations } from '../store/ducks/locations';\nimport LocationsList from '../containers/LocationsList';\nimport LocationsSearch from '../containers/LocationsSearch';\n\nconst Locations = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getLocations());\n  }, []);\n\n  return (\n    <Container>\n      <Row>\n        <Col sm=\"12\" md={{ size: 8, offset: 2 }}>\n          <LocationsSearch />\n          <LocationsList />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Locations;","import React, { Fragment, useEffect, useState } from 'react';\nimport {\n  ListGroup, ListGroupItem, ListGroupItemText,\n  Media, Spinner, Button,\n  Row, Col, Pagination, PaginationItem,\n  PaginationLink,\n} from 'reactstrap';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getEpisodes } from '../store/ducks/episodes';\n\nconst Label = styled.span`\n  font-weight:600;\n`;\n\nconst SpinnerContainer = styled.div`\n  text-align:center;\n  width:100%;\n`;\n\nconst ListHeader = styled.div`\n  padding:40px 20px 10px 20px;\n  font-size:24px;\n`;\n\nconst ButtonsContainer = styled.div`\n  text-align:right;\n`;\n\nconst SortIcon = styled.img`\n  height:20px;\n`;\n\nconst PaginationContainer = styled.div`\n  margin-top:20px;\n  width:100%;\n  text-align:center;\n`;\n\nconst compareCresc = (a, b) => {\n  if (a.name < b.name) return -1;\n  if (a.name > b.name) return 1;\n  return 0;\n};\n\nconst compareDecresc = (a, b) => {\n  if (a.name > b.name) return -1;\n  if (a.name < b.name) return 1;\n  return 0;\n};\n\nconst EpisodesList = () => {\n  const dispatch = useDispatch();\n  const { episodes, loading } = useSelector((state) => state.episodes);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [currentItems, setCurrentItems] = useState([]);\n  const [pagesNumber, setPagesNumber] = useState([]);\n  const itemsPerPage = 5;\n  const indexOfLast = currentPage * itemsPerPage;\n  const indexOfFirst = indexOfLast - itemsPerPage;\n\n  useEffect(() => {\n    dispatch(getEpisodes());\n  }, []);\n\n  useEffect(() => {\n    const filterItensPerPage = episodes.slice(indexOfFirst, indexOfLast);\n    const pages = [];\n    if (episodes.length > 0) setCurrentItems(filterItensPerPage);\n    for (let index = 1; index <= Math.ceil(episodes.length / itemsPerPage); index++) {\n      pages.push(index);\n    }\n    setPagesNumber(pages);\n    if (currentPage > pages.length) setCurrentPage(1);\n    if (episodes.length === 0) setCurrentItems([]);\n  }, [episodes, currentPage]);\n\n  const sortCresc = (list, order) => {\n    const orderedList = order === 'cresc' ? list.sort(compareCresc) : list.sort(compareDecresc);\n    setCurrentItems([...orderedList]);\n  };\n\n  const handleClick = (number) => {\n    setCurrentPage(number);\n    setCurrentItems(episodes.slice(indexOfFirst, indexOfLast));\n  };\n\n  return (\n    <>\n      <ListHeader>\n        <Row>\n          <Col sm={6}>\n          Results (\n            {episodes.length}\n            )\n          </Col>\n          <Col sm={6}>\n            <ButtonsContainer>\n              <Button outline color=\"success\" style={{ marginRight: 10 }} onClick={() => sortCresc(currentItems, 'cresc')}>\n                <SortIcon src=\"https://image.flaticon.com/icons/svg/109/109583.svg\" />\n              </Button>\n              <Button outline color=\"success\" onClick={() => sortCresc(currentItems, 'desc')}>\n                <SortIcon src=\"https://image.flaticon.com/icons/svg/109/109611.svg\" />\n              </Button>\n            </ButtonsContainer>\n          </Col>\n        </Row>\n      </ListHeader>\n      <ListGroup>\n        {loading && (\n          <SpinnerContainer>\n            <Spinner type=\"grow\" color=\"success\" />\n          </SpinnerContainer>\n        )}\n        {currentItems.length > 0 && currentItems.map((episode) => (\n          <ListGroupItem key={episode.id}>\n            <Media body>\n              <Media heading>\n                { episode.name }\n              </Media>\n              <ListGroupItemText>\n                <div>\n                  <Label>Episode:</Label>\n                  { episode.episode }\n                </div>\n                <div>\n                  <Label>Air Date:</Label>\n                  { episode.air_date }\n                </div>\n              </ListGroupItemText>\n            </Media>\n          </ListGroupItem>\n        ))}\n      </ListGroup>\n      {episodes.length === 0 && (\n        <ListGroup>\n          <ListGroupItem>\n            <h1>Ops, no results...</h1>\n          </ListGroupItem>\n        </ListGroup>\n      )}\n      <PaginationContainer>\n        <Pagination>\n          {pagesNumber.map((number) => (\n            <PaginationItem key={number} active={currentPage === number}>\n              <PaginationLink onClick={() => handleClick(number)}>\n                  {number}\n              </PaginationLink>\n            </PaginationItem>\n          ))}\n        </Pagination>\n      </PaginationContainer>\n    </>\n  );\n};\n\nexport default EpisodesList;\n","import React, { Fragment } from 'react';\nimport {\n  Col, Row, Card,\n  FormGroup, Label, Input,\n  Button, FormFeedback,\n} from 'reactstrap';\nimport styled from 'styled-components';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { filterEpisodes, getEpisodes } from '../store/ducks/episodes';\n\nconst ButtonContainer = styled.div`\n  margin-top:30px;\n  margin-left:5px;\n  display:inline-block;\n`;\n\nconst EpisodesSearch = () => {\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      search: '',\n    },\n    onSubmit: (values) => {\n      dispatch(filterEpisodes(values));\n    },\n    validationSchema: Yup.object().shape({\n      search: Yup.string().required(\"Required field\"),\n    }),\n  });\n  const { values, setFieldValue, handleSubmit, errors } = formik;\n\n  return (\n    <>\n      <Row>\n        <Col>\n          <Link to=\"/\">Home</Link>\n        </Col>\n      </Row>\n      <Card body>\n        <Row form>\n          <Col sm={12} md={7}>\n            <FormGroup>\n              <Label for=\"search\">Search Episode</Label>\n              <Input\n                type=\"text\"\n                onChange={({ target: { value } }) => {\n                  setFieldValue('search', value);\n                }}\n                name=\"search\"\n                id=\"search\"\n                placeholder=\"Search a episode\"\n                value={values.search}\n              />\n              {errors && errors.search && (\n              <FormFeedback> {errors.search} </FormFeedback>\n              )}\n            </FormGroup>\n          </Col>\n          <Col>\n            <ButtonContainer>\n              <Button color=\"primary\" onClick={handleSubmit}>Search</Button>\n            </ButtonContainer>\n            <ButtonContainer>\n              <Button outline color=\"primary\" onClick={() => dispatch(getEpisodes())}>Clear</Button>\n            </ButtonContainer>\n          </Col>\n        </Row>\n      </Card>\n    </>\n  );\n};\n\nexport default EpisodesSearch;\n","import React, { useEffect } from \"react\";\nimport {\n  Container, Row, Col,\n} from 'reactstrap';\nimport { useDispatch } from 'react-redux';\nimport { getEpisodes } from '../store/ducks/episodes';\nimport EpisodesList from '../containers/EpisodesList';\nimport EpisodesSearch from '../containers/EpisodesSearch';\n\nconst Episodes = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getEpisodes());\n  }, []);\n\n  return (\n    <Container>\n      <Row>\n        <Col sm=\"12\" md={{ size: 8, offset: 2 }}>\n          <EpisodesSearch />\n          <EpisodesList />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Episodes;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport configureStore from './store/store';\nimport Home from './pages/Home.jsx';\nimport Characters from './pages/Characters.jsx';\nimport Locations from './pages/Locations.jsx';\nimport Episodes from './pages/Episodes.jsx';\n\nconst store = createStore(configureStore, applyMiddleware(thunk))\n\nfunction App(props) {\n  return (\n    <Router>\n      <Provider store={store}>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/characters\">\n              <Characters />\n            </Route>\n            <Route exact path=\"/locations\">\n              <Locations />\n            </Route>\n            <Route exact path=\"/episodes\">\n              <Episodes />\n            </Route>\n          </Switch>\n      </Provider>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}